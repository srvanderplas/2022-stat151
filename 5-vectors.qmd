# Data and Control Structures
<!-- Vectors, Matrices, and Numpy arrays. Logical indexing. For loops. -->
<!-- (probably 2 weeks of content) -->

<!-- Lego pictures made with https://www.mecabricks.com/en/workshop -->

This chapter introduces some of the most important tools for working with data: vectors, matrices, loops, and if statements. It would be nice to gradually introduce each one of these topics separately, but they tend to go together, especially when you're talking about programming in the context of data processing.

## Data Structures

In the previous chapter, we discussed 4 different data types: strings/characters, numeric/double/floats, integers, and logical/booleans. As you might imagine, things are about to get more complicated.

Data **structures** are more complicated arrangements of information. 

  | Homogeneous | Heterogeneous
-- | ---- | ----
1D | vector | list
2D | matrix | data frame
N-D | array | 

### Vectors

A **vector** is a one-dimensional column of homogeneous data. Homogeneous means that every element in a vector has the same data type. 

We can have vectors of any data type and length we want^[Throughout this section (and other sections), lego pictures are rendered using https://www.mecabricks.com/en/workshop. It's a pretty nice tool for building stuff online!]: 
![vectors of different data types](images/lego-set-of-vectors.png)


<!-- ![vector of purple 1x3 legos](images/lego-1x3-vector.png) -->



#### Indexing by Location

Each element in a vector has an **index** - an integer telling you what the item's position within the vector is. I'm going to demonstrate indices with the string vector

R | Python
--- | ---
1-indexed language | 0-indexed language
Count elements as 1, 2, 3, 4, ..., N  | Count elements as 0, 1, 2, 3, , ..., N-1
![R lego vector, labeled with numbers 1-12](images/lego-1x3-vector-R.png) | ![Python lego vector, labeled with numbers 0-11](images/lego-1x3-vector-python.png)


In R, we create vectors with the `c()` function, which stands for "concatenate" - basically, we stick a bunch of objects into a row.

::: ex
<details><summary>Creating vectors in R</summary>

```{r vector-creation-r}
digits_pi <- c(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)

# Access individual entries
digits_pi[1]
digits_pi[2]
digits_pi[3]

# R is 1-indexed - a list of 11 things goes from 1 to 11
digits_pi[0]
digits_pi[11]

# Print out the vector
digits_pi
```

</details>

:::

In python, we create vectors using the `array` function in the numpy module. To add a python module, we use the syntax `import <name> as <nickname>`. Many modules have conventional (and very short) nicknames - for `numpy`, we will use `np` as the nickname.
Any functions we reference in the `numpy` module will then be called using `np.fun_name()` so that python knows where to find them.^[A similar system exists in R libraries, but R doesn't handle multiple libraries having the same function names well, which leads to all sorts of confusion. At least python is explicit about it.]

::: ex
<details><summary>Creating vectors in python</summary>

```{python vector-creation-python, error = T}
import numpy as np
digits_list = [3,1,4,1,5,9,2,6,5,3,5]
digits_pi = np.array(digits_list)

# Access individual entries
digits_pi[0]
digits_pi[1]
digits_pi[2]

# Python is 0 indexed - a list of 11 things goes from 0 to 10
digits_pi[0]
digits_pi[11] 

# Print out the vector
print(digits_pi)
```

</details>

:::

We can pull out items in a vector by indexing, but we can also replace specific things as well:

```{r cat-vector-indexing}
favorite_cats <- c("Grumpy", "Garfield", "Jorts", "Jean")

favorite_cats

favorite_cats[2] <- "Nyan Cat"

favorite_cats
```

If you're curious about any of these cats, see the footnotes^[[Grumpy cat](https://www.grumpycats.com/), [Garfield](https://www.garfield.com/), [Nyan cat](https://en.wikipedia.org/wiki/Nyan_Cat). Jorts and Jean: [The initial post](https://www.reddit.com/r/AmItheAsshole/comments/rfwgmc/aita_for_perpetuating_ethnic_stereotypes_about/) and the [update](https://www.reddit.com/user/throwawayorangecat/comments/rgi000/update_aita_for_perpetuating_stereotypes_about/) (both are worth a read because the story is hilarious). The cats also have a [Twitter account](https://twitter.com/JortsTheCat) where they promote workers rights.].




#### Indexing with Logical Vectors

As you might imagine, we can create vectors of all sorts of different data types. One particularly useful trick is to create a **logical vector** that goes along with a vector of another type to use as a **logical index**.

![lego vectors - a pink/purple hued set of 1x3 bricks representing the data and a corresponding set of 1x1 grey and black bricks representing the logical index vector of the same length](images/lego-logical-full.png)

If we let the black lego represent "True" and the grey lego represent "False", we can use the logical vector to pull out all values in the main vector. 

Black = True, Grey = False | Grey = True, Black = False
--- | ---
![a pink/purple hued set of 1x3 bricks representing a vector and a corresponding set of 1x1 black bricks representing the logical index vector of the same length. The grey bricks (and corresponding values of the previous vector) have been removed (filtered out).](images/lego-logical-black.png) | ![a pink/purple hued set of 1x3 bricks representing a vector and a corresponding set of 1x1 grey bricks representing the logical index vector of the same length. The black bricks (and corresponding values of the previous vector) have been removed (filtered out).](images/lego-logical-grey.png)

Note that for logical indexing to work properly, the logical index must be the same length as the vector we're indexing. This constraint will return when we talk about data frames, but for now just keep in mind that logical indexing doesn't make sense when this constraint isn't true.

::: ex

<details><summary>Indexing with logical vectors in R</summary>

```{r logical-vector-indexing-r}
# Define a character vector
weekdays <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
weekend <- c("Sunday", "Saturday")

# Create logical vectors
relax_days <- c(1, 0, 0, 0, 0, 0, 1) # doing this the manual way
relax_days <- weekdays %in% weekend # This creates a logical vector 
                                    # with less manual construction
relax_days

school_days <- !relax_days # FALSE if weekend, TRUE if not
school_days

# Using logical vectors to index the character vector
weekdays[school_days] # print out all school days
```

</details>

<details><summary>Indexing with logical vectors in python</summary>

```{python logical-vector-indexing-python}
import numpy as np;

animals = np.array(["Cat", "Dog", "Snake", "Lizard", "Tarantula", "Hamster", "Gerbil", "Otter"])

# Define a logical vector
good_pets = np.array([True, True, False, False, False, True, True, False])
bad_pets = np.invert(good_pets) # Invert the logical vector 
                                # so True -> False and False -> True

animals[good_pets]
animals[bad_pets]

animals[~good_pets] # equivalent to using bad_pets
```

</details>

:::

#### Reviewing Types

As vectors are a collection of things of a single type, what happens if we try to make a vector with differently-typed things?

<details><summary>In R</summary>

```{r vector-type-conversion-r}
c(2L, FALSE, 3.1415, "animal") # all converted to strings

c(2L, FALSE, 3.1415) # converted to numerics

c(2L, FALSE) # converted to integers
```
</details>

<details><summary>In python</summary>

```{python vector-type-conversion-python}
import numpy as np

np.array([2, False, 3.1415, "animal"]) # all converted to strings

np.array([2, False, 3.1415]) # converted to numerics

np.array([2, False]) # converted to integers
```

</details>

As a reminder, this is an example of **implicit** type conversion - R and python decide what type to use for you, going with the type that doesn't lose data but takes up as little space as possible. 

### Matrices

A **matrix** is the next step after a vector - it's a set of values arranged in a two-dimensional, rectangular format. 

![lego depiction of a 3-row, 4-column matrix of 2x2 red-colored blocks](images/lego-2x2-matrix.png)

::: ex

<details><summary>Creating matrices in R</summary>

```{r matrix-r}
# Minimal matrix in R: take a vector, 
# tell R how many rows you want
matrix(1:12, nrow = 3)

matrix(1:12, ncol = 3) # or columns

# by default, R will fill in column-by-column
# the byrow parameter tells R to go row-by-row
matrix(1:12, nrow = 3, byrow = T)

# We can also easily create square matrices 
# with a specific diagonal (this is useful for modeling)
diag(rep(1, times = 4))
```

</details>

<details><summary>Creating matrices in python</summary>
In python, matrices are just a special case of a class called `ndarray` - n-dimensional arrays. 

```{python}
import numpy as np
# Minimal ndarray in python by typing in the values in a structured format
np.array([[0,  1,  2],
          [3,  4,  5],
          [6,  7,  8],
          [9, 10, 11]])
# This syntax creates a list of the rows we want in our matrix

# Matrix in python using a data vector and size parameters
np.reshape(range(0,12), (3,4))
np.reshape(range(0,12), (4,3))
np.reshape(range(0,12), (3,4), order = 'F')
```

In python, we create 2-dimensional arrays (aka matrices) either by creating a list of rows to join together or by reshaping a 1-dimensional array. The trick with reshaping the 1-dimensional array is the order argument: 'F' stands for "Fortran-like" and 'C' stands for "C-like"... so to go by column, you use 'F' and to go by row, you use 'C'. Totally intuitive, right?

</details>

:::


This class comes before linear algebra in the required course sequence, so most of the problems we're going to work on will not require much in the way of matrix or array operations. For now, you need the following:

- Know that matrices exist and what they are (2-dimensional arrays of numbers)
- Understand how they are indexed (because it is extremely similar to data frames that we'll work with in the next chapter) 
- Be aware that there are lots of functions that depend on matrix operations at their core (including linear regression)


#### Indexing in Matrices

Both R and python use [row, column] to index matrices. To extract the bottom-left element of a 3x4 matrix in R, we would use [3,1] to get to the third row and first column entry; in python, we would use [2,0] (remember that Python is 0-indexed).

::: ex
<details><summary>
As with vectors, you can replace elements in a matrix using assignment.</summary>

```{r}
my_mat <- matrix(1:12, nrow = 3, byrow = T)

my_mat[3,1] <- 500

my_mat
```

Remember that zero-indexing!

```{python}
import numpy as np

my_mat = np.reshape(range(1, 13), (3,4))

my_mat[2,0] = 500

my_mat
```

</details>
:::

#### Matrix Operations

There are a number of matrix operations that we need to know for basic programming purposes:

- scalar multiplication
$$c*\textbf{X} = c * \left[\begin{array}{cc} x_{1,1} & x_{1, 2}\\x_{2,1} & x_{2,2}\end{array}\right] = \left[\begin{array}{cc} c*x_{1,1} & c*x_{1, 2}\\c*x_{2,1} & c*x_{2,2}\end{array}\right]$$
- transpose - flip the matrix across the left top -> right bottom diagonal.
$$t(\textbf{X}) = \left[\begin{array}{cc} x_{1,1} & x_{1, 2}\\x_{2,1} & x_{2,2}\end{array}\right]^T = \left[\begin{array}{cc} x_{1,1} & x_{2,1}\\x_{1,2} & x_{2,2}\end{array}\right]$$
- matrix multiplication (dot product) - you will learn more about this in linear algebra, but here's a preview. [Here is a better explanation of the cross product](https://www.mathsisfun.com/algebra/matrix-multiplying.html) 
$$\textbf{X}*\textbf{Y} = \left[\begin{array}{cc} x_{1,1} & x_{1, 2}\\x_{2,1} & x_{2,2}\end{array}\right] * \left[\begin{array}{cc} y_{1,1} \\y_{2,1} \end{array}\right] = \left[\begin{array}{c}x_{1,1}*y_{1,1} + x_{1,2}*y_{2,1} \\x_{2, 1}*y_{1,1} + x_{2,2}*y_{2,1}\end{array}\right]$$
Note that matrix multiplication depends on having matrices of compatible dimensions. If you have two matrices of dimension $(a \times b)$ and $(c \times d)$, then $b$ must be equal to $c$ for the multiplication to work, and your result will be $(a \times d)$.

::: ex
<details><summary>Matrix operations in R</summary>

```{r, results = 'show'}
x <- matrix(c(1, 2, 3, 4), nrow = 2, byrow = T)
y <- matrix(c(5, 6), nrow = 2)

# Scalar multiplication
x * 3
3 * x

# Transpose
t(x)
t(y)

# matrix multiplication (dot product)
x %*% y
```

</details>

<details><summary>Matrix operations in python</summary>

```{python}
import numpy as np
x = np.array([[1,2],[3,4]])
y = np.array([[5],[6]])

# scalar multiplication
x*3
3*x

# transpose
x.T # shorthand
x.transpose() # Long form

# Matrix multiplication (dot product)
np.dot(x, y)
```

</details>
:::

### Arrays

Arrays are a generalized n-dimensional version of a vector: all elements have the same type, and they are indexed using square brackets in both R and python: `[dim1, dim2, dim3, ...]`

<details><summary>I don't think you will need to create 3+ dimensional arrays in this class, but if you want to try it out, here is some code.</summary>

```{r}
array(1:8, dim = c(2,2,2))
```

Note that displaying this requires 2 slices, since it's hard to display 3D information in a 2D terminal arrangement.

```{python}
import numpy as np

np.array([[[1,2],[3,4]],[[5,6], [7,8]]])
```

</details>


## Control Structures

Control structures are statements in a program that determine when code is evaluated (and how many times it might be evaluated). There are two main types of control structures: if-statements and loops. 

Before we start on the types of control structures, let's get in the right mindset. We're all used to "if-then" logic, and use it in everyday conversation, but computers require another level of specificity when you're trying to provide instructions.

Check out this video of the classic "make a peanut butter sandwich instructions challenge":

<iframe width="773" height="435" src="https://www.youtube.com/embed/Ct-lOOUqmyY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

Here's another example:

!['If you're done being pedantic, we should get dinner.' 'You did it again!' 'No, I didn't.'](https://imgs.xkcd.com/comics/conditionals.png)


The key takeaways from these bits of media are that you should read this section with a focus on exact precision - state *exactly* what you mean, and the computer will do what you say. If you instead expect the computer to get what you mean, you're going to have a bad time. 


### If Statements

If statements^[and related things like case statements that can be written as multiple if statements] determine if code is evaluated. They look like this: 

```
if (condition)
  then
    (thing to do)
  else
    (other thing to do)
```

The else (other thing to do) part may be omitted.

When this statement is read by the computer, the computer checks to see if condition is true or false. If the condition is true, then (thing to do) is also run. If the condition is false, then (other thing to do) is run instead. 

Let's try this out:

<details><summary>If statement in R</summary>

```{r}
x <- 3
y <- 1

if (x > 2) { 
  y <- 8
} else {
  y <- 4
}

print(paste("x =", x, "; y =", y))
```

In R, the logical condition after `if` must be in parentheses. It is common to then enclose the statement to be run if the condition is true in `{}` so that it is clear what code matches the if statement. You can technically put the condition on the line after the `if (x > 2)` line, and everything will still work, but then it gets hard to figure out what to do with the else statement - it technically would also go on the same line, and that gets hard to read.

```{r}
x <- 3
y <- 1

if (x > 2) y <- 8 else y <- 4

print(paste("x =", x, "; y =", y))
```

So while the 2nd version of the code technically works, the first version with the brackets is much easier to read and understand. Please try to emulate the first version!

</details>

<details><summary>If statement in python</summary>

```{python}
x = 3
y = 1

if x > 2:
  y = 8
else:
  y = 4

print("x =", x, "; y =", y)
```

In python, all code grouping is accomplished with spaces instead of with brackets. So in python, we write our if statement as `if x > 2:` with the colon indicating that what follows is the code to evaluate. The next line is indented with 2 spaces to show that the code on those lines belongs to that if statement. Then, we use the else: statement to provide an alternative set of code to run if the logical condition in the if statement is false. Again, we indent the code under the else statement to show where it "belongs". 

Python will throw errors if you mess up the spacing. This is one thing that is very annoying about Python... but it's a consequence of trying to make the code more readable.

</details>

::: tryitout

The US Tax code has brackets, such that the first \$10,275 of your income is taxed at 10%, anything between \$10,275 and \$41,775 is taxed at 12%, and so on. 

Here is the table of tax brackets for single filers in 2022:

rate | Income
--- | ---
10%	| \$0 to \$10,275	
12%	| \$10,275 to \$41,775
22% | \$41,775 to \$89,075
24% |	\$89,075 to \$170,050
32% |	\$170,050 to \$215,950
35% | \$215,950 to \$539,900
37% | \$539,900 or more

Note: For the purposes of this problem, we're ignoring the personal exemption and the standard deduction, so we're already simplifying the tax code. 

Write a set of if statements that assess someone's income and determine what their overall tax rate is. 

Hint: You may want to keep track of how much of the income has already been taxed in a variable and what the total tax accumulation is in another variable.

<details><summary>Solution (R)</summary>

```{r}
# Start with total income
income <- 200000

# x will hold income that hasn't been taxed yet
x <- income
# y will hold taxes paid
y <- 0

if (x <= 10275) {
  y <- x*.1 # tax paid
  x <- 0 # All money has been taxed
} else {
  y <- y + 10275 * .1
  x <- x - 10275 # Money remaining that hasn't been taxed
}

if (x <= (41775 - 10275)) {
  y <- y + x * .12
  x <- 0
} else {
  y <- y + (41775 - 10275) * .12
  x <- x - (41775 - 10275) 
}

if (x <= (89075 - 41775)) {
  y <- y + x * .22
  x <- 0
} else {
  y <- y + (89075 - 41775) * .22
  x <- x - (89075 - 41775)
}

if (x <= (170050 - 89075)) {
  y <- y + x * .24
  x <- 0
} else {
  y <- y + (170050 - 89075) * .24
  x <- x - (170050 - 89075)
}

if (x <= (215950 - 170050)) {
  y <- y + x * .32
  x <- 0
} else {
  y <- y + (215950 - 170050) * .32
  x <- x - (215950 - 170050)
}

if (x <= (539900 - 215950)) {
  y <- y + x * .35
  x <- 0
} else {
  y <- y + (539900 - 215950) * .35
  x <- x - (539900 - 215950)
}

if (x > 0) {
  y <- y + x * .37
}


print(paste("Total Tax Rate on $", income, " in income = ", round(y/income, 4)*100, "%"))
```

</details>

<details><summary>Solution (python)</summary>


```{python}
# Start with total income
income = 200000

# x will hold income that hasn't been taxed yet
x = income
# y will hold taxes paid
y = 0

if x <= 10275:
  y = x*.1 # tax paid
  x = 0 # All money has been taxed
else:
  y = y + 10275 * .1
  x = x - 10275 # Money remaining that hasn't been taxed

if x <= (41775 - 10275):
  y = y + x * .12
  x = 0
else:
  y = y + (41775 - 10275) * .12
  x = x - (41775 - 10275) 


if x <= (89075 - 41775):
  y = y + x * .22
  x = 0
else: 
  y = y + (89075 - 41775) * .22
  x = x - (89075 - 41775)

if x <= (170050 - 89075):
  y = y + x * .24
  x = 0
else: 
  y = y + (170050 - 89075) * .24
  x = x - (170050 - 89075)

if x <= (215950 - 170050):
  y = y + x * .32
  x = 0
else:
  y = y + (215950 - 170050) * .32
  x = x - (215950 - 170050)

if x <= (539900 - 215950):
  y = y + x * .35
  x = 0
else: 
  y = y + (539900 - 215950) * .35
  x = x - (539900 - 215950)


if x > 0:
  y = y + x * .37



print("Total Tax Rate on $", income, " in income = ", round(y/income, 4)*100, "%")
```

</details>

We will find a better way to represent this calculation once we discuss loops - we can store each bracket's start and end point in a vector and loop through them. Any time you find yourself copy-pasting code and changing values, you should consider using a loop (or eventually a function) instead.

:::

<!-- https://www.py4e.com/html3/03-conditional -->


### Loops

<!-- https://www.py4e.com/html3/05-iterations -->

#### For Loops

