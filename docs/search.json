[
  {
    "objectID": "index.html#how-to-use-this-book",
    "href": "index.html#how-to-use-this-book",
    "title": "Introduction to Statistical Computing",
    "section": "How to Use This Book",
    "text": "I’ve made an effort to use some specific formatting and enable certain features that make this book a useful tool for this class.\nSpecial Sections\nWatch Out\nWatch out sections contain things you may want to look out for - common errors, etc.\n \nExamples\nExample sections contain code and other information. Don’t skip them!\n \nMy Opinion\nThese sections contain things you should definitely not consider as fact and should just take with a grain of salt.\n \nGo Read\nSometimes, there are better resources out there than something I could write myself. When you see this section, go read the enclosed link as if it were part of the book.\n \nTry It Out\nTry it out sections contain activities you should do to reinforce the things you’ve just read.\n \nLearn More\nLearn More sections contain other references that may be useful on a specific topic. Suggestions are welcome (email me to suggest a new reference that I should add), as there’s no way for one person to catalog all of the helpful programming resources on the internet!\n \nNote\nNote sections contain clarification points (anywhere I would normally say “note that ….)\nExpandable Sections\n\nThese are expandable sections, with additional information when you click on the line\n\nThis additional information may be information that is helpful but not essential, or it may be that an example just takes a LOT of space and I want to make sure you can skim the book without having to scroll through a ton of output.\n \n\nMany times, examples will be in expandable sections\n\nThis keeps the code and output from obscuring the actual information in the textbook that I want you to retain. You can always look up the syntax, but you do need to absorb the details I’ve written out."
  },
  {
    "objectID": "index.html#about-this-book",
    "href": "index.html#about-this-book",
    "title": "Introduction to Statistical Computing",
    "section": "About This Book",
    "text": "This is a Quarto book. To learn more about Quarto books visit https://quarto.org/docs/books.\nI have written this entire book using reproducible techniques, with R and python code and results included within the book’s text.\nStat 151 will be offered for the first time in Spring 2022, as I’m writing this in Fall 2021. Initially, my goal is to write the book in R and include python as an additional option/example. Eventually, I hope to teach Stat 151 in R and Python at the same time."
  },
  {
    "objectID": "getting-started.html#getting-started-objectives",
    "href": "getting-started.html#getting-started-objectives",
    "title": "\n1  Getting Started\n",
    "section": "Objectives",
    "text": "Understand the basics of how computers work\nUnderstand the file system mental model for computers\nSet up RStudio, R, Quarto, and python\nBe able to run demo code in R and python"
  },
  {
    "objectID": "getting-started.html#computer-basics",
    "href": "getting-started.html#computer-basics",
    "title": "\n1  Getting Started\n",
    "section": "\n1.1 Computer Basics",
    "text": "It is helpful when teaching a topic as technical as programming to ensure that everyone starts from the same basic foundational understanding and mental model of how things work. When teaching geology, for instance, the instructor should probably make sure that everyone understands that the earth is a round ball and not a flat plate – it will save everyone some time later.\nWe all use computers daily - we carry them around with us on our wrists, in our pockets, and in our backpacks. This is no guarantee, however, that we understand how they work or what makes them go.\n\n1.1.1 Hardware\nHere is a short 3-minute video on the basic hardware that makes up your computer. It is focused on desktops, but the same components (with the exception of the optical drive) are commonly found in cell phones, smart watches, and laptops.\n\n\n\n\nWhen programming, it is usually helpful to understand the distinction between RAM and disk storage (hard drives). We also need to know at least a little bit about processors (so that we know when we’ve asked our processor to do too much). Most of the other details aren’t necessary (for now).\n\n1.1.2 Operating Systems\nOperating systems, such as Windows, MacOS, or Linux, are a sophisticated program that allows CPUs to keep track of multiple programs and tasks and execute them at the same time.\n\n\n\n\n\n1.1.3 File Systems\nEvidently, there has been a bit of generational shift as computers have evolved: the “file system” metaphor itself is outdated because no one uses physical files anymore. This article is an interesting discussion of the problem: it makes the argument that with modern search capabilities, most people use their computers as a laundry hamper instead of as a nice, organized filing cabinet.\nRegardless of how you tend to organize your personal files, it is probably helpful to understand the basics of what is meant by a computer file system – a way to organize data stored on a hard drive. Since data is always stored as 0’s and 1’s, it’s important to have some way to figure out what type of data is stored in a specific location, and how to interpret it.\n\n\n\n\nThat’s not enough, though - we also need to know how computers remember the location of what is stored where. Specifically, we need to understand file paths.\n\n\n\n\nWhen you write a program, you may have to reference external files - data stored in a .csv file, for instance, or a picture. Best practice is to create a file structure that contains everything you need to run your entire project in a single file folder (you can, and sometimes should, have sub-folders).\nFor now, it is enough to know how to find files using file paths, and how to refer to a file using a relative file path from your base folder. In this situation, your “base folder” is known as your working directory - the place your program thinks of as home."
  },
  {
    "objectID": "markdown.html#scripts",
    "href": "markdown.html#scripts",
    "title": "\n2  Scripts and Notebooks\n",
    "section": "\n2.1 Scripts",
    "text": "Before I show you how to use literate programming, let’s look at what it replaces: scripts. Scripts are files of code that are meant to be run on their own. They may produce results, or format data and save it somewhere, or scrape data from the web – scripts can do just about anything.\nScripts can even have documentation within the file, using # characters (at least, in R and python) at the beginning of a line. # indicates a comment – that is, that the line does not contain code and should be ignored by the computer when the program is run. Comments are incredibly useful to help humans understand what the code does and why it does it.\n\n2.1.1 Plotting a logarithmic spiral in R and python\nThis code will use concepts we have not yet introduced - feel free to tinker with it if you want, but know that you’re not responsible for being able to write this code yet. You just need to read it and get a sense for what it does. I have heavily commented it to help with this process.\n\n# Define the angle of the spiral (polar coords)\n# go around two full times (2*pi = one revolution)\ntheta <- seq(0, 4*pi, .01) \n# Define the distance from the origin of the spiral\n# Needs to have the same length as theta\nr <- seq(0, 5, length.out = length(theta))\n\n# Now define x and y in cartesian coordinates\nx <- r * cos(theta)\ny <- r * sin(theta)\n\nplot(x, y, type = \"l\")\n\n\n\nFigure 2.1: A Cartesian Spiral in R\n\n\n\n\nI have saved this script here. You can download it and open it up in RStudio (File -> Open -> Navigate to file location).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the angle of the spiral (polar coords)\n# go around two full times (2*pi = one revolution)\ntheta = np.arange(0, 4 * np.pi, 0.01)\n# Define the distance from the origin of the spiral\n# Needs to have the same length as theta \n# (get length of theta with theta.size, \n#  and then divide 5 by that to get the increment)\nr = np.arange(0, 5, 5/theta.size)\n\n# Now define x and y in cartesian coordinates\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\n# Define the axes\nfig, ax = plt.subplots()\n# Plot the line\nax.plot(x, y)\nplt.show()\n\n\n\nFigure 2.2: A Cartesian Spiral in python\n\n\n\n\nI have saved this script here. You can download it and open it up in RStudio (File -> Open -> Navigate to file location).\nScripts can be run in Rstudio by clicking the Run button  at the top of the editor window when the script is open.\n\n2.1.2 Try it out!\nDownload the R and python scripts in the above example, open them in RStudio, and run each script using the Run button. What do you see?"
  },
  {
    "objectID": "markdown.html#notebooks",
    "href": "markdown.html#notebooks",
    "title": "\n2  Scripts and Notebooks\n",
    "section": "\n2.2 Notebooks",
    "text": "Notebooks are an implementation of literate programming. Both R and python have native notebooks that are cross-platform and allow you to code in R or python. This book is written using Quarto markdown, which is an extension of Rmarkdown, but it is also possible to use jupyter notebooks to write R code.\nIn this class, we’re going to use Quarto/R markdown, because it is a much better tool for creating polished reports than Jupyter (in my opinion). This matters because the goal is that you learn something useful for your own coding and then you can easily apply it when you go to work as an analyst somewhere to produce impressive documents. Jupyter notebooks are great for interactive coding, but aren’t so wonderful for producing polished results. They also don’t allow you to switch between languages mid-notebook, and since I’m trying to teach this class in both R and python, I want you to have both languages available.\n\nThere are some excellent opinions surrounding the use of notebooks in data analysis:\n\n\nWhy I Don’t Like Notebooks” by Joel Grus at JupyterCon 2018\n\nThe First Notebook War by Yihui Xie (response to Joel’s talk).\nYihui Xie is the person responsible for knitr and Rmarkdown.\n\n\n\n2.2.1 Try it out - R markdown\nTake a look at the R markdown sample file I’ve created to go with the R script above. You can see the HTML file it generates here.\n\nDownload the Rmd file and open it with RStudio.\nChange the output to output: word_document and hit the Render button . Can you find the markdown-demo.docx file that was generated? What does it look like?\nChange the output to output: pdf_document and hit the Render button . Can you find the markdown-demo.pdf file that was generated? What does it look like?\n\nRmarkdown tries very hard to preserve your formatted text appropriately regardless of the output document type. While things may not look exactly the same, the goal is to allow you to focus on the content and the formatting will “just work”.\n \n\n2.2.2 Try it out - Jupyter\nTake a look at the jupyter notebook sample file I’ve created to go with the R script above. You can see the HTML file it generates here.\n\nDownload the ipynb file and open it with jupyter.\nExport the notebook as a pdf file (File -> Save as -> PDF via HTML). Can you find the jupyter-demo.pdf file that was generated? What does it look like?\nExport the notebook as an html file (File -> Save as -> HTML). Can you find the jupyter-demo.html file that was generated? What does it look like?\nNotes:\nShow code R file, code python file, R notebook file, and jupyter notebook file that do similar things. Then show a quarto notebook file that runs the R and python chunks together in a single document."
  },
  {
    "objectID": "basic-math-operations.html",
    "href": "basic-math-operations.html",
    "title": "3  Using R and Python as Calculators",
    "section": "",
    "text": ""
  },
  {
    "objectID": "data-types.html",
    "href": "data-types.html",
    "title": "4  Basic Data Types",
    "section": "",
    "text": "integer/numeric/string/double/etc."
  },
  {
    "objectID": "vectors.html",
    "href": "vectors.html",
    "title": "5  Vectors, Arrays, Indexing, and Loops",
    "section": "",
    "text": "Vectors, Matrices, and Numpy arrays. Logical indexing. For loops.\n(probably 2 weeks of content)"
  },
  {
    "objectID": "data-structures.html",
    "href": "data-structures.html",
    "title": "6  Data Structures",
    "section": "",
    "text": "data frames in R and Pandas"
  },
  {
    "objectID": "reading-data.html",
    "href": "reading-data.html",
    "title": "7  Reading in Data",
    "section": "",
    "text": "External data files - csv, excel, etc."
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "Introduction to Statistical Computing",
    "section": "",
    "text": ""
  },
  {
    "objectID": "statistics.html",
    "href": "statistics.html",
    "title": "Introduction to Statistical Computing",
    "section": "",
    "text": ""
  },
  {
    "objectID": "ttests.html",
    "href": "ttests.html",
    "title": "Introduction to Statistical Computing",
    "section": "",
    "text": ""
  },
  {
    "objectID": "linear-modeling.html",
    "href": "linear-modeling.html",
    "title": "Introduction to Statistical Computing",
    "section": "",
    "text": ""
  },
  {
    "objectID": "git-github.html",
    "href": "git-github.html",
    "title": "Introduction to Statistical Computing",
    "section": "",
    "text": ""
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": ""
  }
]